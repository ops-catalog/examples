version: '3.7'
volumes: {}
networks:
  catalogn: { }

services:
  postgres:
    image: postgres:15.5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./setup/containers/postgres/data:/var/lib/postgresql/data
      - ./setup/containers/postgres/certs:/opt/postgres/certs:r
      - ./setup/containers/postgres/scripts/:/docker-entrypoint-initdb.d/
      - ./setup/containers/postgres/conf:/var/lib/postgresql/conf
    container_name: postgres
    command: postgres -c config_file=/var/lib/postgresql/conf/postgresql.conf -c ssl=off
    networks:
      catalogn:
        aliases:
        - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: "10s"
      timeout: "10s"
      retries: 3

  pg-data:
    image: postgres:15.5
    environment:
      - PG_USER=postgres
      - PGPASSWORD=password
      - PG_HOST=postgres
    container_name: pg-data
    volumes:
      - ./setup/containers/pg-data/files/scripts:/tmp/scripts
      - ./setup/containers/pg-data/files/sql:/tmp/data
    networks:
      catalogn:
        aliases:
          - pg-data
    command:
      - /bin/bash
      - -c
      - /tmp/scripts/init.sh
    depends_on:
      postgres:
        condition: service_healthy

  cassandra:
    image: cassandra:3.11.16
    environment:
      - DS_LICENSE=accept
      - SSL_VALIDATE=true
    ports:
      - "9042:9042"
    container_name: cassandra
    volumes:
    - ./setup/containers/cassandra/data:/opt/cassandra/data
    - ./setup/containers/cassandra/certs:/opt/cassandra/certs:r
    - ./setup/containers/cassandra/conf/cassandra.yaml:/opt/cassandra/conf/cassandra.yaml
    networks:
      catalogn:
        aliases:
          - cassandra
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 20s
      timeout: 10s
      retries: 3

  cass-data:
    image: cassandra:3.11.16
    environment:
      - CASS_USER=cassandra
      - CASS_PASSWORD=cassandra
      - CASSANDRA_HOST=cassandra
    container_name: cass-data
    volumes:
      - ./setup/containers/cass-data/files/scripts:/tmp/scripts
      - ./setup/containers/cass-data/files/cql:/tmp/data
    networks:
      catalogn:
        aliases:
          - cass-data
    command:
      - /bin/bash
      - -c
      - /tmp/scripts/init.sh
    depends_on:
      cassandra:
        condition: service_healthy


  kafka:
    image: bitnami/kafka:3.4.1-debian-11-r117
    ports:

      - "9092:9092"
      - "9094:9094"
    volumes:
      - "./setup/kafka/data:/bitnami"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    container_name: kafka
    networks:
      catalogn:
        aliases:
          - kafka
    healthcheck:
      test: ["CMD-SHELL", "bash", "-c", "kafka-topics.sh", "--list", "--bootstrap.server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-setup:
    image: bitnami/kafka:3.4.1-debian-11-r117
    environment:
      - TOPICS=servicing.customer-events,payment.card-payment
      - KAFKA_HOST=kafka
    container_name: kafka-setup
    volumes:
      - './setup/containers/kafka-setup/files/scripts:/tmp/scripts'
    command: ['/bin/bash', '-c', '/tmp/scripts/init.sh']
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      catalogn:
        aliases:
          - kafka-setup


  airflow:
    image: skhatri/airflow:2.0.2
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      pg-data:
        condition: service_completed_successfully
    container_name: airflow
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
    volumes:
      - ./setup/containers/airflow/dags:/opt/airflow/dags
      - ./setup/containers/airflow/logs:/opt/airflow/logs
      - ./setup/containers/airflow/conf/airflow.cfg:/opt/airflow/airflow.cfg
    ports:
      - "8280:8080"
    command: embedded
    networks:
      catalogn:
        aliases:
          - airflow

    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: "20s"
      timeout: "20s"
      retries: 3



  k8s-read:
    image: skhatri/go-http-cache:v1.0.5
    restart: always
    container_name: k8s-read
    environment:
      - TARGET=http://k8s-read.ops-catalog.io:80
      - TARGET_DESC="wont be called as we are using cached data"
      - CONFIG_FILE=/conf/config.yaml
      - LOG_MISS=true 
      - IGNORE_HEADERS=true
      - LISTEN_ADDRESS=k8s-read:6100
    volumes:
      - ./setup/containers/k8s-proxy-cache/cache:/tmp/cache
    ports:
      - "6100:6100"
    networks:
      catalogn:
        aliases:
          - k8s-read

  
  ops-catalog:
    image: opscatalog/catalog:v0.3.2
    restart: always
    container_name: ops-catalog
    environment:
      - LOG_LEVEL="INFO"
      - CONFIG_FILE=/opt/conf/config.yaml
      - SSL_STATE=off
    volumes:
      - ./recipes/discovery/config.yaml:/opt/conf/config.yaml
      - ./setup/secrets:/opt/secrets
      - ./datasets:/opt/examples/datasets
    depends_on:
      postgres:
        condition: service_healthy
      pg-data:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    networks:
      catalogn:
        aliases:
          - ops-catalog

  ui:
    image: opscatalog/backstage-ui:latest
    restart: always
    container_name: ui
    environment:
      - NODE_ENV=development
      - ENVIRONMENT_CONFIG=local 
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CATALOG_URL=http://ops-catalog:8080/api/catalog
    volumes:
      - ./setup/containers/ui/conf/:/app/conf
    depends_on: {}
    ports:
      - "7007:7007"
    networks:
      catalogn:
        aliases:
          - ui

